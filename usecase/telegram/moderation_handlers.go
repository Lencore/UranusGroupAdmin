package telegram

import (
	"app/dto"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)

// ModeratedGroup –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–¥–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±–æ—Ç–æ–º
type ModeratedGroup struct {
	ChatID            int64
	CloseTime         string // –§–æ—Ä–º–∞—Ç: "HH:MM"
	OpenTime          string // –§–æ—Ä–º–∞—Ç: "HH:MM"
	WhitelistedLinks  []string
	WhitelistedUsers  []int64
	EveningMessage    string
	MorningMessage    string
	ModerateLinks     bool
	ModerateScheduled bool
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (t *Telegram) setupModeration() {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
	t.bot.Handle("/moderate", t.cmdModerate)
	t.bot.Handle("/open", t.cmdSetOpenTime)
	t.bot.Handle("/close", t.cmdSetCloseTime)
	t.bot.Handle("/whitelist", t.cmdWhitelist)
	t.bot.Handle("/evening_message", t.cmdSetEveningMessage)
	t.bot.Handle("/morning_message", t.cmdSetMorningMessage)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫)
	t.bot.Handle(tele.OnText, t.moderateLinks)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–æ–≤
	go t.scheduleModeration()
}

// cmdModerate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /moderate
func (t *Telegram) cmdModerate(ctx tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
	if !ctx.Chat().IsGroup() {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
	sender := ctx.Sender()
	admins, err := t.bot.AdminsOf(ctx.Chat())
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	isAdmin := false
	for _, admin := range admins {
		if admin.User.ID == sender.ID {
			isAdmin = true
			break
		}
	}

	if !isAdmin && sender.ID != dto.GlobalAdminID {
		return ctx.Reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
	}

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–æ–π –≥—Ä—É–ø–ø–µ
	group := &ModeratedGroup{
		ChatID:            ctx.Chat().ID,
		CloseTime:         "22:00",
		OpenTime:          "09:00",
		WhitelistedLinks:  []string{},
		WhitelistedUsers:  []int64{},
		EveningMessage:    "–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç –¥–æ —É—Ç—Ä–∞. –î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô",
		MorningMessage:    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç. üåû",
		ModerateLinks:     true,
		ModerateScheduled: true,
	}

	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	err = t.saveModeratedGroup(group)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
	}

	return ctx.Reply("–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n" +
		"- –ß–∞—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 22:00\n" +
		"- –ß–∞—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 09:00\n" +
		"- –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –≤–∫–ª—é—á–µ–Ω–∞\n\n" +
		"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n" +
		"/close –ß–ß:–ú–ú - –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞\n" +
		"/open –ß–ß:–ú–ú - –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞\n" +
		"/whitelist —Å–ª–æ–≤–æ - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ/—Å—Å—ã–ª–∫—É –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
}

// cmdSetOpenTime —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
func (t *Telegram) cmdSetOpenTime(ctx tele.Context) error {
	if !ctx.Chat().IsGroup() {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !t.isAdmin(ctx.Chat(), ctx.Sender()) {
		return ctx.Reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
	args := ctx.Args()
	if len(args) != 1 {
		return ctx.Reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: /open 09:00")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
	timeStr := args[0]
	if !t.isValidTimeFormat(timeStr) {
		return ctx.Reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
	group, err := t.getModeratedGroup(ctx.Chat().ID)
	if err != nil {
		return ctx.Reply("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /moderate")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
	group.OpenTime = timeStr
	err = t.saveModeratedGroup(group)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
	}

	return ctx.Reply(fmt.Sprintf("–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %s", timeStr))
}

// cmdSetCloseTime —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
func (t *Telegram) cmdSetCloseTime(ctx tele.Context) error {
	if !ctx.Chat().IsGroup() {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !t.isAdmin(ctx.Chat(), ctx.Sender()) {
		return ctx.Reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
	args := ctx.Args()
	if len(args) != 1 {
		return ctx.Reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: /close 22:00")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
	timeStr := args[0]
	if !t.isValidTimeFormat(timeStr) {
		return ctx.Reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 22:00")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
	group, err := t.getModeratedGroup(ctx.Chat().ID)
	if err != nil {
		return ctx.Reply("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /moderate")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
	group.CloseTime = timeStr
	err = t.saveModeratedGroup(group)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
	}

	return ctx.Reply(fmt.Sprintf("–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %s", timeStr))
}

// cmdWhitelist –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /whitelist –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤/—Å—Å—ã–ª–æ–∫ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
func (t *Telegram) cmdWhitelist(ctx tele.Context) error {
	// –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
	if !ctx.Chat().IsPrivate() {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º")
	}

	if ctx.Sender().ID != dto.GlobalAdminID {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	args := ctx.Args()
	if len(args) < 1 {
		return ctx.Reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
	whitelist := strings.Join(args, " ")
	err := t.addToGlobalWhitelist(whitelist)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
	}

	return ctx.Reply(fmt.Sprintf("'%s' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", whitelist))
}

// cmdSetEveningMessage —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
func (t *Telegram) cmdSetEveningMessage(ctx tele.Context) error {
	if !ctx.Chat().IsGroup() {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !t.isAdmin(ctx.Chat(), ctx.Sender()) {
		return ctx.Reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	message := strings.Join(ctx.Args(), " ")
	if message == "" {
		return ctx.Reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
	group, err := t.getModeratedGroup(ctx.Chat().ID)
	if err != nil {
		return ctx.Reply("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /moderate")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	group.EveningMessage = message
	err = t.saveModeratedGroup(group)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
	}

	return ctx.Reply("–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
}

// cmdSetMorningMessage —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
func (t *Telegram) cmdSetMorningMessage(ctx tele.Context) error {
	if !ctx.Chat().IsGroup() {
		return ctx.Reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !t.isAdmin(ctx.Chat(), ctx.Sender()) {
		return ctx.Reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	message := strings.Join(ctx.Args(), " ")
	if message == "" {
		return ctx.Reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
	group, err := t.getModeratedGroup(ctx.Chat().ID)
	if err != nil {
		return ctx.Reply("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /moderate")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	group.MorningMessage = message
	err = t.saveModeratedGroup(group)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã", zap.Error(err))
		return ctx.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
	}

	return ctx.Reply("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
}

// moderateLinks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
func (t *Telegram) moderateLinks(ctx tele.Context) error {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
	if !ctx.Chat().IsGroup() {
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
	group, err := t.getModeratedGroup(ctx.Chat().ID)
	if err != nil || !group.ModerateLinks {
		return nil
	}

	// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–µ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º
	if t.isAdmin(ctx.Chat(), ctx.Sender()) {
		return nil
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ, –Ω–µ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º
	if t.isUserWhitelisted(ctx.Sender().ID, group) {
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	text := ctx.Text()
	if t.containsBlockedLink(text, group) {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		err := ctx.Delete()
		if err != nil {
			zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", zap.Error(err))
			return nil
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ª–∏—á–∫—É)
		t.bot.Send(&tele.User{ID: ctx.Sender().ID}, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.")

		return nil
	}

	return nil
}

// scheduleModeration –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–æ–≤
func (t *Telegram) scheduleModeration() {
	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			t.checkGroupsSchedule()
		}
	}
}

// checkGroupsSchedule –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø
func (t *Telegram) checkGroupsSchedule() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
	now := time.Now()
	currentTimeStr := now.Format("15:04")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã–µ –≥—Ä—É–ø–ø—ã
	groups, err := t.getAllModeratedGroups()
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø", zap.Error(err))
		return
	}

	for _, group := range groups {
		if !group.ModerateScheduled {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
		if currentTimeStr == group.OpenTime {
			t.openChat(group)
		} else if currentTimeStr == group.CloseTime {
			t.closeChat(group)
		}
	}
}

// openChat –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func (t *Telegram) openChat(group *ModeratedGroup) {
	chat := &tele.Chat{ID: group.ChatID}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	permissions := tele.ChatPermissions{
		CanSendMessages:       true,
		CanSendMediaMessages:  true,
		CanSendPolls:          true,
		CanSendOtherMessages:  true,
		CanAddWebPagePreviews: true,
		CanChangeInfo:         false,
		CanInviteUsers:        true,
		CanPinMessages:        false,
	}

	err := t.bot.SetGroupPermissions(chat, permissions)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", zap.Error(err), zap.Int64("chat_id", group.ChatID))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = t.bot.Send(chat, group.MorningMessage)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", zap.Error(err), zap.Int64("chat_id", group.ChatID))
	}

	zap.L().Info("–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç", zap.Int64("chat_id", group.ChatID))
}

// closeChat –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func (t *Telegram) closeChat(group *ModeratedGroup) {
	chat := &tele.Chat{ID: group.ChatID}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
	permissions := tele.ChatPermissions{
		CanSendMessages:       false,
		CanSendMediaMessages:  false,
		CanSendPolls:          false,
		CanSendOtherMessages:  false,
		CanAddWebPagePreviews: false,
		CanChangeInfo:         false,
		CanInviteUsers:        false,
		CanPinMessages:        false,
	}

	err := t.bot.SetGroupPermissions(chat, permissions)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç", zap.Error(err), zap.Int64("chat_id", group.ChatID))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = t.bot.Send(chat, group.EveningMessage)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", zap.Error(err), zap.Int64("chat_id", group.ChatID))
	}

	zap.L().Info("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç", zap.Int64("chat_id", group.ChatID))
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
func (t *Telegram) isAdmin(chat *tele.Chat, user *tele.User) bool {
	if user.ID == dto.GlobalAdminID {
		return true
	}

	admins, err := t.bot.AdminsOf(chat)
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", zap.Error(err))
		return false
	}

	for _, admin := range admins {
		if admin.User.ID == user.ID {
			return true
		}
	}

	return false
}

// isValidTimeFormat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
func (t *Telegram) isValidTimeFormat(timeStr string) bool {
	re := regexp.MustCompile(`^([01]?[0-9]|2[0-3]):([0-5][0-9])$`)
	return re.MatchString(timeStr)
}

// containsBlockedLink –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
func (t *Telegram) containsBlockedLink(text string, group *ModeratedGroup) bool {
	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Å—ã–ª–æ–∫
	urlRe := regexp.MustCompile(`https?://\S+`)
	tMeRe := regexp.MustCompile(`t\.me/\S+`)
	atMentionRe := regexp.MustCompile(`@\w+`)

	// –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
	globalWhitelist, err := t.getGlobalWhitelist()
	if err != nil {
		zap.L().Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", zap.Error(err))
		globalWhitelist = []string{}
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–µ–ª—ã–µ —Å–ø–∏—Å–∫–∏
	whitelist := append(globalWhitelist, group.WhitelistedLinks...)

	// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	urls := urlRe.FindAllString(text, -1)
	tMeLinks := tMeRe.FindAllString(text, -1)
	mentions := atMentionRe.FindAllString(text, -1)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
	allLinks := append(urls, tMeLinks...)
	allLinks = append(allLinks, mentions...)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
	for _, link := range allLinks {
		isWhitelisted := false
		for _, allowed := range whitelist {
			if strings.Contains(strings.ToLower(link), strings.ToLower(allowed)) {
				isWhitelisted = true
				break
			}
		}

		if !isWhitelisted {
			return true
		}
	}

	return false
}

// isUserWhitelisted –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
func (t *Telegram) isUserWhitelisted(userID int64, group *ModeratedGroup) bool {
	for _, id := range group.WhitelistedUsers {
		if id == userID {
			return true
		}
	}
	return false
}

// –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏

// saveModeratedGroup —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–æ–π –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (t *Telegram) saveModeratedGroup(group *ModeratedGroup) error {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	// –í –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

	key := fmt.Sprintf("moderated_group:%d", group.ChatID)

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
	whitelistedLinks := strings.Join(group.WhitelistedLinks, ",")

	var whitelistedUsersStr []string
	for _, id := range group.WhitelistedUsers {
		whitelistedUsersStr = append(whitelistedUsersStr, strconv.FormatInt(id, 10))
	}
	whitelistedUsers := strings.Join(whitelistedUsersStr, ",")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è –≥—Ä—É–ø–ø—ã
	err := t.redis.Set(key+":close_time", group.CloseTime)
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":open_time", group.OpenTime)
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":whitelisted_links", whitelistedLinks)
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":whitelisted_users", whitelistedUsers)
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":evening_message", group.EveningMessage)
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":morning_message", group.MorningMessage)
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":moderate_links", strconv.FormatBool(group.ModerateLinks))
	if err != nil {
		return err
	}

	err = t.redis.Set(key+":moderate_scheduled", strconv.FormatBool(group.ModerateScheduled))
	if err != nil {
		return err
	}

	return nil
}

// getModeratedGroup –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (t *Telegram) getModeratedGroup(chatID int64) (*ModeratedGroup, error) {
	key := fmt.Sprintf("moderated_group:%d", chatID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	if !t.redis.Has(key + ":close_time") {
		return nil, fmt.Errorf("group not found")
	}

	closeTime, err := t.redis.GetString(key + ":close_time")
	if err != nil {
		return nil, err
	}

	openTime, err := t.redis.GetString(key + ":open_time")
	if err != nil {
		return nil, err
	}

	whitelistedLinksStr, err := t.redis.GetString(key + ":whitelisted_links")
	if err != nil {
		return nil, err
	}

	whitelistedUsersStr, err := t.redis.GetString(key + ":whitelisted_users")
	if err != nil {
		return nil, err
	}

	eveningMessage, err := t.redis.GetString(key + ":evening_message")
	if err != nil {
		return nil, err
	}

	morningMessage, err := t.redis.GetString(key + ":morning_message")
	if err != nil {
		return nil, err
	}

	moderateLinksStr, err := t.redis.GetString(key + ":moderate_links")
	if err != nil {
		return nil, err
	}

	moderateScheduledStr, err := t.redis.GetString(key + ":moderate_scheduled")
	if err != nil {
		return nil, err
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
	var whitelistedLinks []string
	if whitelistedLinksStr != "" {
		whitelistedLinks = strings.Split(whitelistedLinksStr, ",")
	}

	var whitelistedUsers []int64
	if whitelistedUsersStr != "" {
		for _, idStr := range strings.Split(whitelistedUsersStr, ",") {
			id, err := strconv.ParseInt(idStr, 10, 64)
			if err != nil {
				continue
			}
			whitelistedUsers = append(whitelistedUsers, id)
		}
	}

	moderateLinks, _ := strconv.ParseBool(moderateLinksStr)
	moderateScheduled, _ := strconv.ParseBool(moderateScheduledStr)

	return &ModeratedGroup{
		ChatID:            chatID,
		CloseTime:         closeTime,
		OpenTime:          openTime,
		WhitelistedLinks:  whitelistedLinks,
		WhitelistedUsers:  whitelistedUsers,
		EveningMessage:    eveningMessage,
		MorningMessage:    morningMessage,
		ModerateLinks:     moderateLinks,
		ModerateScheduled: moderateScheduled,
	}, nil
}

// getAllModeratedGroups –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã–µ –≥—Ä—É–ø–ø—ã
func (t *Telegram) getAllModeratedGroups() ([]*ModeratedGroup, error) {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	// –í –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ Redis

	// –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Redis
	// –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ

	var groups []*ModeratedGroup

	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Redis –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "moderated_group:"

	return groups, nil
}

// addToGlobalWhitelist –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ/—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
func (t *Telegram) addToGlobalWhitelist(word string) error {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
	whitelist, err := t.getGlobalWhitelist()
	if err != nil {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
		whitelist = []string{}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
	whitelist = append(whitelist, word)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
	whitelistStr := strings.Join(whitelist, ",")
	return t.redis.Set("global:whitelist", whitelistStr)
}

// getGlobalWhitelist –ø–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
func (t *Telegram) getGlobalWhitelist() ([]string, error) {
	whitelistStr, err := t.redis.GetString("global:whitelist")
	if err != nil {
		return nil, err
	}

	if whitelistStr == "" {
		return []string{}, nil
	}

	return strings.Split(whitelistStr, ","), nil
}
