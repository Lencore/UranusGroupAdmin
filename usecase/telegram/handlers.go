package telegram

import (
	"app/gateway/database"
	"fmt"
	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
	"time"
)

func (t *Telegram) loadUser(ctx tele.Context) (*database.User, error) {
	user, err := t.db.GetUserByID(ctx.Sender().ID)
	if err != nil {
		user := &database.User{
			ID:        ctx.Sender().ID,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
			FirstName: ctx.Sender().FirstName,
			LastName:  ctx.Sender().LastName,
			Username:  ctx.Sender().Username,
		}
		err := t.db.CreateUser(user)
		if err != nil {
			zap.L().Error("failed to create user", zap.Error(err))
			return nil, err
		}

		return user, nil
	}

	return user, err
}

func (t *Telegram) SomeCronJob() error {
	// –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç—ã —Ç—É—Ç –≤—ã–±–∏—Ä–∞–µ—à—å —é–∑–µ—Ä–æ–≤ –∏ —à–ª–µ—à—å –∏–º —á—Ç–æ-—Ç–æ

	userIDs, err := t.db.GetAllUserIDs()
	if err != nil {
		return err
	}

	for _, userID := range userIDs {
		_, _ = t.bot.Send(&tele.User{ID: userID}, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏")
	}

	return nil
}

func (t *Telegram) cmdStart(ctx tele.Context) error {
	user, err := t.loadUser(ctx)
	if err != nil {
		zap.L().Error("failed to load user", zap.Error(err))
		_ = ctx.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return err
	}

	_ = ctx.Send(fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", user.FirstName))

	return nil
}

func (t *Telegram) cmdBan(ctx tele.Context) error {
	_ = ctx.Send("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")

	return nil
}

func (t *Telegram) cmdCountUsers(ctx tele.Context) error {
	// —Ç—ã –º–æ–∂–µ—à—å —é–∑–∞—Ç—å –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ database, —Ç–∞–∫ –∏ —é–∑–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∫–ª–∏–µ–Ω—Ç –±–∞–∑—ã (–Ω–æ —è –±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞–ª)
	// t.db.CountUsers() - –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –≤ gateway/database –∏ –≤—ã–∑—ã–≤–∞—Ç—å –µ–≥–æ

	var totalUsers int64
	t.db.DB().Model(&database.User{}).Count(&totalUsers)

	_ = ctx.Send(fmt.Sprintf("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", totalUsers))
	return nil
}
